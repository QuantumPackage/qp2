[basis]
type: character*(256)
doc: Name of the |AO| basis set
interface: ezfio, provider

[typ]
type: character*(32)
doc: Type of basis set. Only 'Gaussian' is supported
interface: ezfio, provider

[shell_num]
type: integer
doc: Number of shells
interface: ezfio, provider

[nucleus_shell_num]
type: integer
doc: Number of shells per nucleus
size: (nuclei.nucl_num)
interface: ezfio, provider

[shell_normalization_factor]
type: double precision
doc: Normalization factor applied to the whole shell, ex $1/\sqrt{ <d_{z^2}|d_{z^2}>}$
size: (basis.shell_num)
interface: ezfio

[shell_ang_mom]
type: integer
doc: Angular momentum of each shell
size: (basis.shell_num)
interface: ezfio, provider

[shell_prim_num]
type: integer
doc: Number of primitives in a shell
size: (basis.shell_num)
interface: ezfio, provider

[shell_index]
type: integer
doc: Index of the shell for each primitive
size: (basis.prim_num)
interface: ezfio, provider

[basis_nucleus_index]
type: integer
doc: Nucleus on which the shell is centered
size: (basis.shell_num)
interface: ezfio, provider

[prim_normalization_factor]
type: double precision
doc: Normalization factor applied to each primitive
size: (basis.prim_num)
interface: ezfio

[prim_num]
type: integer
doc: Total number of primitives
interface: ezfio, provider

[prim_coef]
type: double precision
doc: Primitive coefficients
size: (basis.prim_num)
interface: ezfio, provider

[prim_expo]
type: double precision
doc: Exponents in the shell
size: (basis.prim_num)
interface: ezfio, provider


[primitives_normalized]
type: logical
doc: If true, assume primitive basis functions are normalized
interface: ezfio, provider, ocaml
default: true

[ao_normalized]
type: logical
doc: If true, normalize the basis functions
interface: ezfio, provider, ocaml
default: false
